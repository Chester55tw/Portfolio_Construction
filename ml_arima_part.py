# -*- coding: utf-8 -*-
"""ml arima part.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14gBeauPeIjnMXkYKebThnCfnjHf9VpV0
"""

import pandas as pd
import matplotlib
import matplotlib.pyplot as plt 
import numpy as np
import warnings
warnings.filterwarnings("ignore")
from datetime import datetime
from statsmodels.tsa.stattools import acf , pacf
from statsmodels.graphics.tsaplots import plot_pacf, plot_acf
from sklearn.preprocessing import MinMaxScaler
from pmdarima import auto_arima

df=pd.read_csv("C:/Users/Pansi/Downloads/AAPL(1).csv")
df.set_index('Date',inplace=True)
df.head()

data = df.iloc[8000:].copy()

apprice = data['Close']
plot_pacf(apprice, lags=15)
plt.title("PACF of petrol price")
plt.xlabel("Lag at k")
plt.ylabel("Correlation Coefficient")

"""We should see the lag 1 and 2 order explain most of the higher order. we should use order 1 or 2 autoregression to fit.  """

from statsmodels.tsa.stattools import adfuller
adf = adfuller(apprice)
print('ADF statistic is:',adf[0])
print('p value:', adf[1])

"""From p value we know the stock price is not stationary"""

pdiff1 = apprice.diff(1).bfill()
adf = adfuller(pdiff1)
print('ADF statistic is:',adf[0])
print('p value:', adf[1])

"""From p value we know the difference of the price is stationary"""

plot_pacf(pdiff1, lags=15)
plt.xlabel("Lag at k")

"""take p = 1"""

plot_acf(pdiff1, lags=15)
plt.xlabel("Lag at k")

"""take q = 1"""

from statsmodels.tsa.arima.model import ARIMA

#print(model_fit.summary())

train = apprice[:-300]
test =  apprice[-300:]
model = ARIMA(train, order = (1,1,1), seasonal_order = (1,1,1,12))
model_fit = model.fit()
forcast = model_fit.forecast(300, D=1, alpha=0.05)
forcast_series = pd.Series(forcast.values, index=test.index)
#lower_bound = pd.Series(conf_int[:, 0], index=test.index)
#upper_bound = pd.Series(conf_int[:, 1], index=test.index)

# Plot
#plt.figure(figsize=(10,7), dpi=100)
plt.plot(train, label='training')
plt.plot(test, 'g:', label='actual')
plt.plot(forcast_series ,'b--', label='forecast')

plt.title('Forecast vs Actuals')
plt.legend(loc='upper left', fontsize=8)
plt.show()

